Ονοματεπώνυμο: Αλέξανδρος Αλατζάς
Α.Μ.: sdi1900005

Εντολή μεταγλώττισης: g++ -std=c++11 main.cpp

Για την εκτέλεση δίνει ο χρήστης σύμφωνα με την εκφώνηση τις χωρητικότητες
Cclass, Cyard, Cstair, Ccorr με αυτή τη σειρά.(πχ ./a.out 3 10 5 5)
Προτείνεται κατά την εκτέλεση να δοθεί μέγιστη χωρητικότητα τάξης 21 μαθητές.
Οι μαθητές αρχικοποιούνται μέσω ενός αρχείου 400 μοναδικών ονομάτων στη main.
Θεώρησα πως το πολύ 382 μαθητές είναι αρκετοί για να φανούν κατάλληλα οι λειτουργίες του προγράμματος.

Το παραδοτέο μου αποτελείται από δύο αρχεία πηγαίου κώδικα(School.cpp , main.cpp), ένα αρχείο
επικεφαλίδας (School.h) καθώς και δύο αρχεία κειμένου(README.txt , names.txt).
Στο names.txt αναφέρονται ενδεικτικά (400) ονόματα που βρήκα στο διαδίκτυο.
Αυτά τα χρησιμοποιώ στη main, ώστε κατά τη δημιουργία των μαθητών να ανατίθεται
και στον κάθε μαθητή ένα μοναδικό όνομα. Στο School.h έχω γράψει τους ορισμούς των κλάσεων.
Στο School.cpp έχω γράψει την υλοποίηση των κλάσεών ενώ στο main.cpp την
υλοποίηση της ενδεικτικής main μαζί και με μία βοηθητική συνάρτηση swap.
Τέλος, έχω γράψει σχόλια για τις μικρές λεπτομέριες του κώδικα.

Πιο συγκεκριμένα, αναφορικά με το School.cpp και το School.h:
Αρχικά κάνω #include τις βιβλιοθήκες που θα χρησιμοποιήσω, iostream για τις εκτυπώσεις
και cstring για χρήση strings καθώς και το School.h .
Έπειτα, γράφω τις υλοποιήσεις των κλάσεών μου.Γενικά έχω προσπαθήσει τα ονόματα των μεταβλητών αλλά και
των συναρτήσεων να περιγράφουν και τη λειτουργία τους.

Για έναν ΜΑΘΗΤΗ ορίζω τα στοιχεία του σύμφωνα με τις απαιτήσεις της εκφώνησης στο private
μέρος της κλάσης για να μην είναι ορατές από τον χρήστη.Επιλέγω το όνομα να καταχωρηθεί 
ως string ώστε μετά στην main να δεχτεί ένα string από το αρχείο μου. Αντίστοιχα και ένα string 
ως ένδειξη της τοποθεσίας του την εκάστοτε στιγμή. Αρχικοποιώ τις τιμές του μαθητή κατά
τη δημιουργία του μέσω initializer list στον constructor του και ορίζω accessors και mutator αφού
έχω επιλέξει τα στοιχεία του να είναι private.

Για έναν ΚΑΘΗΓΗΤΗ ορίζω τα στοχεία του σύμφωνα με την εκφώνηση στο private μέρος, κατά παρόμοιο
τρόπο με τον μαθητή. Διαθέτει μια bool μεταβλητή inClass η οποία είναι ένδειξη αν βρίσκεται σε τάξη.
Αρχικοποιείται κατά  τη δημιουργία του με initializer list και ορίζονται οι αντίστοιχοι accessors.

Για τους χώρους ΑΥΛΗ, ΣΚΑΛΕΣ, ΔΙΑΔΡΟΜΟΣ ακολουθώ ένα μοτίβο:
π.χ. για την αυλή ορίζω έναν ακέραιο Cyard συμβολίζοντας την χωρητικότητά της, όπως θα δοθεί όταν οριστεί.
Ορίζω έναν πίνακα από δείκτες σε κλάση τύπου Student διότι στην εργασία δουλεύω με δείκτες σε Student,
δηλαδή δημιουργώ μαθητές, δείκτες που δείχνουν σε μαθητές και αυτούς τους δείκτες του αναθέτω στις θέσεις
του πίνακα δεικτών του εκάστοτε χώρου στον οποίο θέλω να εισέλθει ο μαθητής.
Επίσης υπάρχει και ένας ακέραιος counter ο οποίος μετράει τους ήδη υπάρχοντες μαθητές μέσα σε έναν χώρο.
Οι χώροι διαθέτουν επίσης συναρτήσεις enter και exit.
Η enter δέχεται ως όρισμα έναν δείκτη σε Student και ελέγχει αν υπάρχει θέση στον χώρο που θέλει να εισέλθει
Αν ναι τότε τον αναθέτει στον πίνακα δεικτών του χώρου, αυξάνει τον counter, εκτυπώνει το αντίστοιχο μήνυμα
και αναθέτει την τοποθεσία στην ένδειξη τοποθεσίας του μαθητή. Αλλιώς, δεν κάνει τίποτα από τα παραπάνω και
μένει στον χώρο που βρισκόταν εξ αρχής. Αντιστοίχως στην exit εκτυπώνεται το μήνυμα, ο counter μειώνεται κατά
μία μονάδα και ο δείκτης της θέσης του μαθητή δείχνει πλέον σε NULL. Κατά αντίστοιχο τρόπο και για τους άλλους
χώρους.

Για την ΤΑΞΗ ακολουθείται παρόμοια υλοποίηση με την πάραπανω. Επιπρόσθετα, η τάξη στο private μέρος διαθέτει
τα στοιχεία της, μια ένδειξη bool αν βρίσκεται καθηγητής μέσα σε αυτήν και έναν δείκτη σε κλάση Teacher ο 
οποίος αρχικά δείχνει σε NULL, για να του ανατεθεί ο δείκτης του καθηγητή που θα τοποθετηθεί. Διαθέτει μια
συνάρτηση set_teacher(Teacher* teacher) η οποία δέχεται έναν δείκτη σε Teacher, τον αναθέτει στην τάξη και
θέτει την ένδειξη της τάξης σε true. Η συνάρτηση place(Teacher* teacher) απλώς καλεί την set_teacher.
Η συνάρτηση enter ακολουθέι ίδια υλοποίηση με εκείνες των παραπάνω χώρων. Εδώ δεν γίνεται έλεγχος διότι θα έχει
προηγηθεί ο έλεγχος στην enter του διαδρόμου που αναφέρεται παρακάτω η οποία θα ελέγχει και την ύπαρξη καθηγητή.

Για τον ΟΡΟΦΟ έχουμε τις χωρητικότητες του διαδρόμου και των τάξεων αντίστοιχα, τον αριθμό του, τον counter,
έναν δείκτη σε Corridor και έναν πίνακα δεικτών τύπου Classroom 6 θέσεων(τάξεων). Κατά τη κλήση του constructor του
ορίζονται δυναμικά και ένας Corridor και έξι Classroom, τα οποία αντιστοίχως αρχικοποιούνται. Ενδιαφέρον έχει
η enter του. Αναθέτω στον counter του ορόφου τον counter του διαδρόμου, καθώς ο ίδιος ο όροφος δεν διαθέτει 
χωρητικότητα. Κάνω τον έλεγχο για να μπεί ο μαθητής στον διάδρομο και μετά κάνω τον έλεγχο για να μπέι στην
τάξη του, σύμφωνα με την εκφώνηση. Στην place παίρνω τον δείκτη σε Teacher και καλώ την place της τάξης του,
την οποία μαθαίνω από την get_classNo().

Για το ΣΧΟΛΕΙΟ έχουμε όλες τις χωρητικότητες που δίνονται, τον counter, έναν δείκτη σε Yard, έναν δείκτη σε
Stairs και έναν πίνακα δεικτών τύπου Floor με 3 θέσεις(ορόφους). Κατά τη κλήση του constructor του ορίζονται
δυναμικά και ένα Yard, ένα Stairs και 3 Floor της αντίστοιχης χωρητικότητας. Δηλαδή, φτιάχνωντας τον κάθε όροφο,
εκείνος θα φτιάξει και τον διάδρομό του και τις τάξεις του κλπ. άρα όλο το σχολικό κτήριο. Η συνάρτηση place
παίρνει τον δείκτη σε Teacher και καλεί την place του ορόφου του, τον οποίο μαθαίνει απο την get_floorNo().
Το σχολείο διαθέτει μία συνάρτηση single_enter και μία multi_enter. Στην single enter δέχεται έναν δείκτη
σε Student και κάνει τους αντίστοιχους ελέγχους για να τον εισάγει στην αυλή, έπειτα στις σκάλες και τέλος 
στον όροφο. Η multi_enter δέχεται ως ορίσματα έναν πίνακα δεικτών και το μέγεθός του και εισάγει όσους
περισσότερους μπορεί στο σχολείο, καλώντας την single_enter για τον καθένα.


Η υλοποίησή μου ακολουθεί το σενάριο (στο lists.di.uoa.gr ονομάστηκε Β) κατά το οποίο η εισαγωγή είναι επικεντρωμένη
γύρω από έναν μαθητή κοιτάζοντας πόσο θα προχωρήσει, μέχρι να κοιτάξουμε τον επόμενο.

Αναφορικά με το main.cpp:
Κάνω #include πάλι cstring και iostream και επιπλέον fstream για να διαχειριστώ το names.txt, ctime για να 
βάλω seed στη rand, stdlib.h για τη συνάρτηση rand και το School.cpp με τις υλοποιήσεις των κλάσεών μου.
Η συνάρτηση swap είναι αρκετά απλή και τη χρησιμοποιώ αργότερα για να "ανακατέψω" τη λίστα των μαθητών μου.
Αρχικά μέσω της atoi μετατρέπω σε ακέραιο και αποθηκεύω τις χωρητικότητες που πέρασε ο χρήστης 
στη γραμμή εντολών, ορίζω επίσης ακέραιες τιμές που θα με βοηθήσουν στην υλοποίηση(περιγράφεται σε σχόλια 
η χρήση της κάθε μεταβλητής) και αρχικοποιώ την rand. Με τις δεδομένες χωρητικότητες λοιπον, κατασκευάζω το
σχολείο αρχικοποιώντας το με αυτές και εκτυπώνονται τα μηνύματα κατασκευής σύμφωνα με την εκφώνηση. Στη συνέχεια,
ορίζω έναν πίνακα απο 400 strings και ανοίγω το αρχείο names.txt. Αφού ελέγξω ότι το αρχείο άνοιξε επιτυχώς, μέσω
της συνάρτησης getline διαβάζω γραμμή προς γραμμή το αρχείο και αποθηκεύω το κάθε όνομα στον πίνακά μου.
Το αρχείο κλείνει.
Δημιουργώ έναν πίνακα από δείκτες σε Teacher 18 θέσεων, γνωρίζοντας ότι κάθε τάξη έχει 1 καθηγητή και κάθε σχολείο
18 τάξεις. Τους αναθέτω όνομα από το αρχείο μου, τα αντίστοιχα στοιχεία τους και την ένδειξη ότι αρχικά θα είναι
εκτός τάξης.
Παρόμοια διαδικασία ακολουθώ και για τη δημιουργία μαθητών. Δημιουργώ Cclass * 18 μαθητές, όσους χωράνε δηλαδή
Είναι φανερό κατά τη δημιουργία των μαθητών ότι ανατίθενται ονόματα από το 18ο και έπειτα ώστε να μην έχει 
κάποιος μαθητής ίδιο όνομα με καθηγητή(να είναι όλοι ξεχωριστοί). Επιπλέον κατά τις εκτυπώσεις δημιουργίας μαθητών
είναι φανερή η σειρά με την οποία δημιουργούνται(π.χ. ο πρώτος μαθητής είναι το 19ο όνομα δηλαδή Justin). 
Αυτή η παρατήρηση θα μας βοηθήσει να διαπιστώσουμε πως κατά την κλήση της swap όντως ο πίνακας δεικτών των μαθητών
θα ανακατευθεί.
Με δύο βοηθητικούς ακεραίους οι οποίοι θα είναι τυχαίοι σε κάθε επανάληψη από το 0 εώς τον αριθμό που ισούται με
το σύνολο των μαθητών ο πίνακας πλέον είναι τυχαία ανακατεμένος.
Αντιστοίχως ανακατεύεται και ο πίνακας των καθηγητών.
Για την είσοδο των μαθητών αρχικά θα κληθεί η multi_enter του σχολείου ώστε να εισαχθούν όσοι χωράνε προτού αρχίσουν
να εισέρχονται οι καθηγητές. Εδώ αξίζει να σημειωθεί ότι ο πρώτος εισαχθέντας κατά μεγάλη πιθανότητα (οχι όμως σίγουρα)
δεν θα είναι ο Justin και αντιστοίχως για τους επόμενους, εισάγονται με άλλη σειρά από αυτή που δημιουργήθηκαν.
Έπειτα, για όσο έχουμε μαθητές να εισαχθούν, ορίζουμε σε κάθε επανάληψη έναν ακέραιο ο οποίος λειτουργεί σαν τη
ρίψη κέρματος. Το αποτέλεσμα της ρίψης θα καθορίσει αν στη συγκεκριμένη επανάληψη θα εισαχθεί καθηγητής στο σχολείο.
Αν το αποτέλεσμα είναι θετικό, τότε επιλέγεται πάλι τυχαία ποιός από τους καθηγητές θα εισαχθεί. Κατόπιν, εισέρχεται
και ένας ακόμα τυχαίος μαθητής.
Αφού τελειώσει η επανάληψη εκτυπώνουμε το σχολικό κτήριο σύμφωνα με τα ζητούμενα της εκφώνησης. 
Τέλος απελευθερώνουμε όση μνήμη δεσμεύτηκε δυναμικά κατά τη δημιουργία των μαθητών και των καθηγητών.